/usr/bin/perl -x # ignore warnings
/usr/bin/perl -w # show all warnings
/usr/bin/perl -d:Trace # trace

dir: ledger123

Install Libreoffice Calc for knowledgebase mapping of porting.

############Observations:

# following appears to identify key business procedures initiated by UI.
grep callback bin/mozilla/*.pl
# callbacks are passed in UI. Identified by bin/mozilla/<filename>.pl? and
#  passed parameters using http/cgi.

# standardized variables:
# rowcount =  used to count itemized rows, for example parts in an invoice
#             and passed via UI

ct = 'vendor' or 'customer' (or 'contact')
# and yet.
#grep db notes-menu.ini.txt
# returns these cases:
db=customer
db=vendor
db=employee
# subsequently, simplifying interpretation of $db, E.g. with ct
# for all other menu driven parameter values, see: notes-menu-params.txt

ct.pl  <-- builds forms.. review when drafting UI's
ct.pl contains form html/defs for many vendor/customer forms,
port those to accounts-contacts/lib/form-name.adp/tcl pairs like
using templates in accounts-ledger/www/admin/test-*


queries are built from SL/*.pm and bin/mozilla/*.pl. Check header of *.pl for
reference to *.pm

SL/Form.pm contains form building routines and other utilities, such as number
formatting, locale translation etc.


Pages are built using ledger123/login.pl which
calls ledger123/??.pl which
loads SL/Form.pm and
calls bin/mozilla/??.pl which
imports SL/??.pm

See notes-priorities.txt for order of processing/porting..





########Agenda:

iterate following numbered steps: per bin/mozilla/*.pl file and components.

1. Transpose/port dynamically generated SL queries to OpenACS xql files
     to be called by tcl. Use the package table definitions.
     Verify with psql logs for literal queries. 
     Transfer queries to .xql files as close to original as possible
     (ie use asterisk if there, then later, convert asterisks to
     explicit field names --to save time, to accelerate to alpha stage.
2. Create appropriate UI pages in oacs package equivalent to menu.ini
     that uses the same bin/mozilla/*.pl file and components,
     taking care to use the ported, revised database model, morphology etc.
     Name the file and make functional using oacs object model standards.
     singular = add one, show one, email, make some other based on it etc.
     plural = show many, select one, or batch select many to process, sort etc.
     Use qfo_sp_table_g2 to build table reports.
     Use qal_3g and friends to build UI pages.
3.  Abstract form definitions into package-defaults.tcl file alongside
     procs that provide default values. The form definitions should
     build on the default proc default values, and use parameters
     to maybe refer to custom procs that provide default values
     for example for customer number, invoice number etc.
4.  Abstract all business processes into procs for package-biz-procs.tcl etc.
    This will also be useful for regression testing in tcl/test
 5. Link the parts together and test.


These have 'query' in them:
bin/mozilla/reports.pl
bin/mozilla/lib.pl
bin/mozilla/rp.pl
bin/mozilla/custom_am.pl
bin/mozilla/gl.pl
bin/mozilla/trf.pl
bin/mozilla/im.pl
bin/mozilla/ic.pl
bin/mozilla/mylib.pl
bin/mozilla/custom_is.pl
SL/CP.pm
SL/VR.pm
SL/HR.pm
SL/RC.pm
SL/CA.pm
SL/OP.pm
SL/RP.pm
SL/OE.pm
SL/IS.pm
SL/AA.pm
SL/IC.pm
SL/BP.pm
SL/IM.pm
SL/GL.pm
SL/CT.pm  [draft export done]  accounts-contacts
SL/User.pm [mostly redundant to oacs user interface]
SL/AM.pm
SL/PE.pm
SL/JC.pm
SL/IR.pm
SL/Trf.pm
SL/Form.pm  [draft export done]  accounts-contacts



review business logic in SL procs. port to appropriate packges in the port.
Form.pm sub format_amount plays with positive/negative sign in context
of CR and DB, and formating.

requirement1: create object-like field definition procs like in hosting-farm, except each field is a name/value list with attributes: fieldname value(default:see datatype), title, datatype, context**, scalared_array_p(default:0)***. So the field-like definition procs will return list_of_lists.

**context is the grouping of fields (kind of like fieldset), except the html for these fields are output into variable called "context" so that can be readily input into a template, such as accounts-ledger/www/admin/test-lib-page-frags-with-equalize.adp but located in accounts-ledger/lib

*** scalared_array_p indicates that the variable is a scalared array, so consider cases name_1 ... name_N  For security, the value of N maybe passed as a hidden variable via db instead of form... something like qal__context_max
###Note, this is not used. Use: qfo::form_list_def_to_css_table_rows and qal_3g.




################ Done -----------------

CT.pm  put into accounts-contacts


q-control user permissions RBAC/IAM based [Done]
q-data-types for validation of more specific data types [Done ]
q-forms form handing routines for app building [Done]


build qal_3g based on qfo_2g.  qal_3g spits out a series of form values based on the value of context, instead of qfo_2g's one form_html.[Done]


make a map of cooresponding table and field names between ledger123 and accounts-* packages. NO, just ledger123 tables to accounts-* tables.. [Done] and

note all differences in the accounts-*-create.sql files (and any other porting notes).[Done]

requirement2: incorporate scalared arrays, where arrays or lists are adapted to html forms by adding a suffix number. x(1) becomes x_1, x(2) -> x_2 ... x_N. This way rows of data may be handled similarly. [Done: qfo::form_list_def_to_css_table_rows & qfo_3g]



make a map of SL subroutines (sub sub_name) to file, as some names are shared in different files..
Do subroutines that share same name have same code in each case? Or different?
[Done]


work on accounts-ledger focused items first.
 Any queries with shared AR go in AR.
 Any queries with shared AP go in AP
 Any queries with shared AP/AR go in accounts-ledger


admin.pl (to administer db and user permissions etc.)
setup.pl (to setup system)
In /ledger123 (different than ./bin/mozilla/.), following have EXACT SAME code --no execptions--, and pull in the name of the file as a means to differentiate:
   131 admin.pl
   131 login.pl
   234 am.pl
   234 ap.pl
   234 ar.pl
   234 bp.pl
   234 ca.pl
   234 cp.pl
   234 ct.pl
   234 gl.pl
   234 hr.pl
   234 ic.pl
   234 im.pl
   234 ir.pl
   234 is.pl
   234 jc.pl
   234 menu.pl
   234 oe.pl
   234 pe.pl
   234 ps.pl
   234 rc.pl
   234 reports.pl
   234 rp.pl
   234 trf.pl
   234 vr.pl
   552 setup.pl

sql -- contains setup for database
SL -- contains business code and SQL queries
bin -- contains code that sets defaults that get passed to SL library(api,modules)

(At least for /bin/mozilla)

AM = Admin module, chart of accounts, template routines, preferences
aa = AP / AR common routines
am = administration
ap = Accounts Payable
ar = Accounts Receivable
arap = common routines for gl, ar, ap, is, ir, oe
arapprn = printing routines for ar, ap
bp = Batch Printing
ca = Chart of Accounts, Income Statement, Balance Sheet, search and edit transactions posted by the GL, AR, and AP
CP = Check and receipt printing payment module
ct = customers/vendors
Form = form utilities
gl = general ledger
hr = Payroll and Human Resources
ic = inventory control
Inifile = utils to get win.ini style files
im = import/export
io = custom routines used in is, ir, oe
ir = inventory receivable / received
is = inventory invoicing module
jc = job costing module
lib = api library
login = login/logout frontend, db api setup
Mailer = email utilities 
menu = menu, two frame layout with refactored menu
mylib = export to xls, to csv,
Num2text = routine for check writing
oe = Order Entry, Quotation module
OP = Opverpayment utils used in AR,AP,IS,IR,OE,CP
pe = project / job administration
pe = project/job, partsgroup admininstration, and translation maintenance
pos = Point of Sale POS
ps = POS script
pw = password routines
rc = account reconciliation module
reports.pl = inventoy onhand qty and value by based on FIFO
rp = reports, prepare Income Statement and Balance Sheet
trf = transfer inventory utils
user = user related functions
vr = voucher/batch register and processing setup
ir = inventory receivable / received
is = inventory invoicing module
io = custom routines used in is, ir, oe




Divided by OpenACS package (in order of dependencies)


openacs [Done]
login = login/logout frontend, db api setup
Mailer = email utilities 
menu = menu, two frame layout with refactored menu
lib = api library
pw = password routines
user = user related functions






